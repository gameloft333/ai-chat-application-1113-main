# version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: ai-chat-application-1113-main-frontend-1
    restart: unless-stopped
    env_file: 
      - .env.production
    ports:
      - "4173:4173"
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - saga4v_network # When both Docker Compose files use driver: bridge for the same network name (saga4v_network), Docker Compose will create a shared bridge network that allows containers from both compose files to communicate.
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0  # 添加这个环境变量 # new added on 20250211
      - PORT=4173  # new added on 20250211
      - VITE_SOCKET_URL=wss://love.saga4v.com # 设置WebSocket URL  new added on 20250209
      - VITE_WEBSOCKET_PATH=/socket.io # 设置WebSocket路径  new added on 20250209
      - VITE_DEV_SERVER_HOST=0.0.0.0  # 添加这个环境变量
      - VITE_ALLOW_HOSTS=love.saga4v.com # new added on 20250211
      - VITE_ALLOWED_HOSTS=love.saga4v.com,localhost,127.0.0.1
      - VITE_HMR_HOST=love.saga4v.com

  # server:
  #   build: 
  #     context: .
  #     dockerfile: Dockerfile.server  # 
  #   container_name: ai-chat-application-1113-main-backend-1
  #   restart: unless-stopped
  #   env_file: 
  #     - .env.production
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=4242
  #     - SKIP_FIREBASE_CONFIG=true
  #   ports:
  #     - "4242:4242"  
  #   volumes:
  #     - ./logs:/app/logs
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4242/health"]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   networks:
  #     - saga4v_network

  payment:
    build: 
      context: ./payment-server
      dockerfile: Dockerfile
    container_name: ai-chat-application-1113-main-payment-server-1
    restart: unless-stopped
    env_file: 
      - .env.production
    environment:
      - NODE_ENV=production
      - PORT=4242
      - CORS_ORIGIN=${VITE_APP_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      # 添加调试标记
      - DEBUG=true
      # Firebase 配置
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}
      - SKIP_FIREBASE_CONFIG=true
    ports:
      - "4242:4242"  # 支付服务保持原端口
    volumes:
      - ./payment-server/logs:/app/logs
    healthcheck:
      # 健康检查命令，通过curl请求http://localhost:4242/来检查服务是否健康
      # 如果请求失败，curl命令将返回非0的退出代码，导致健康检查失败
      # 使用"|| exit 0"确保即使curl命令失败，健康检查也会返回0，表示服务健康
      test: ["CMD-SHELL", "curl -f http://localhost:4242/ || exit 0"]
      interval: 60s
      timeout: 30s
      retries: 2
      start_period: 120s
    networks:
      - saga4v_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Add monitoring or logging service
  # Remove or comment out if not needed
  # monitoring:
  #   image: grafana/grafana
  #   container_name: companion-monitoring
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - saga4v_network

networks:
  saga4v_network: 
    external: true  # Use the same external network as Nginx. Important: tells Docker this network is created externally.
    # driver: bridge