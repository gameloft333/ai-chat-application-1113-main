开发规则：
1.所有的关键信息key配置都需要存储在 .env 文件中，统一管理
2.在添加任何方法之后，都需要对函数进行定义和声明
3.使用最小化代码模块的方式开发，严格遵守，已经测试通过的代码功能，不做修改和调整，除非有特殊需求
4.遇到问题，打印更多的debug log来定位，不要盲目修改
5.确保引用的所有导入文件路径检查没有问题
6.开发所有新功能时，都不能影响现有功能的正常逻辑
7.不能随便删除原有正常功能的代码逻辑，除非涉及到现有新加功能的关联性的必要改动
8.开发过程中，需要及时提交代码，并及时更新版本号
9.开发过程中，需要及时更新commit，并及时推送到远程仓库
10.开发过程中，需要及时更新package.json中的版本号，并及时推送到远程仓库
11.开发过程中，需要及时更新dev_rule.txt中的开发规则，并及时推送到远程仓库
12.开发过程中，需要及时更新README.md中的开发文档，并及时推送到远程仓库
13.不要随意删除任何文件，除非确定该文件不再需要
14.不要随意删除任何文件夹，除非确定该文件夹不再需要
15.不要随意删除项目中的任何key值和配置，除非确定该key值和配置不再需要
16.不要随意删除项目中的任何代码注释消息，除非确定该key值和配置不再需要
17.请使用**Material Design** 和 **Human Interface Guidelines** （HIG），
优化ui迭代方案，基于@dev_rule的规则为最基础前提，对 @codebase 里面的 文件 进行迭代优化，
注意：在优化ui过程中，不要删除任何逻辑代码块和key值和配置，以及代码中已经包含的组件和注释说明，只需要优化迭代ui显示层面的代码，
务必牢记 并遵循 @dev_rule.txt , 对 @codebase 进行每一个模块的ui界面优化，在优化
完成后，帮我列出已优化和待优化的文件列表，谢谢
18. 请不要将任何key暴露在代码中，都需要使用调用env文件中的key作为标准
19. 针对发生的问题进行有针对性的处理，最高优先级处理现下出现的错误，
20. 请在修改时，严格遵守 @dev_rule.txt 的标准，进行修改，然后思考修改的内容是否违背开发原则，最终输出正确的修改，
21. 如果支持多语言模式，请务必使用多语言对应键值调用，而避免使用 hardcode 代码来显示多语言文本
22. 在创建任何文件之前，通读项目中全部代码，确保没有任何一个文件和当前所需要创建的文件是重复功能的，才可以创建新文件
